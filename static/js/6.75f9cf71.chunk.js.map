{"version":3,"sources":["store/actions/todoActions.ts","components/Todo/AddTask.tsx","screens/TodoList.tsx"],"names":["Priority","Label","SimpleDialog","props","dispatch","useDispatch","onClose","open","handleClose","validationSchema","Yup","shape","task","required","max","min","priority","initialValues","Medium","Dialog","fullWidth","DialogTitle","id","className","onSubmit","label","item","Date","now","toString","Med","isActive","type","ActionType","ADD_ITEM","payload","isValid","dirty","values","DialogContent","name","component","TextField","variant","RadioGroup","row","map","e","FormControlLabel","value","control","Radio","color","DialogActions","Button","disabled","TodoList","items","useSelector","state","todo","useState","setOpen","handleMark","CROSS_ITEM","crossItem","Grid","container","md","justifyContent","TableContainer","Paper","Table","TableHead","TableRow","TableCell","onClick","align","TableBody","toLowerCase"],"mappings":"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","file":"static/js/6.75f9cf71.chunk.js","sourcesContent":["import ActionType from \"../types\";\nenum Priority {\n  Low = \"Low\",\n  Medium = \"Medium\",\n  High = \"High\",\n}\n\ninterface Item {\n  task: string;\n  priority: Priority;\n  id: string;\n  isActive: boolean;\n  label: string;\n}\n\nexport const addItem = (item: Item) => ({\n  type: ActionType.ADD_ITEM,\n  payload: item,\n});\n\nexport const crossItem = (id: string) => ({\n  type: ActionType.CROSS_ITEM,\n  payload: id,\n});\n","import React from \"react\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogActions,\n  Button,\n  Radio,\n  FormControlLabel,\n} from \"@material-ui/core\";\n\n// validation\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField, RadioGroup } from \"formik-material-ui\";\nimport { useDispatch } from \"react-redux\";\nimport { addItem } from \"../../store/actions/todoActions\";\nimport \"../../styles/add-task.scss\";\n\ninterface Props {\n  onClose: () => void;\n  open: boolean;\n}\n\ntype Task = string;\n\nenum Priority {\n  Low = \"Low\",\n  Medium = \"Medium\",\n  High = \"High\",\n}\n\nenum Label {\n  Low = \"Low\",\n  Med = \"Med\",\n  High = \"High\",\n}\n\ninterface Item {\n  task: Task;\n  priority: Priority;\n}\n\nexport default function SimpleDialog(props: Props) {\n  const dispatch = useDispatch();\n  const { onClose, open } = props;\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  let validationSchema = Yup.object().shape({\n    task: Yup.string()\n      .required(\"Task name is required.\")\n      .max(15, \"Maximum length for task name is 15.\")\n      .min(2, \"Minimum length for task name is 2.\"),\n    priority: Yup.string().required(),\n  });\n\n  const saveTask = ({ task, priority }: Item) => {\n    const id = Date.now().toString();\n    let label: Label;\n    if (priority === \"Medium\") {\n      label = Label.Med;\n    } else {\n      label = Label[Priority[priority] as keyof typeof Label];\n    }\n    dispatch(addItem({ task, priority, id, isActive: true, label }));\n    handleClose();\n  };\n\n  const initialValues:Item = {\n    task: \"\",\n    priority: Priority.Medium,\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <DialogTitle id=\"simple-dialog-title\">\n        <h2 className=\"add-task__title\">Add a task ðŸ“‹</h2>\n      </DialogTitle>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={saveTask}\n        validationSchema={validationSchema}\n      >\n        {({ isValid, dirty, values }) => {\n          return (\n            <Form>\n              <DialogContent>\n                <Field\n                  name=\"task\"\n                  label=\"Task name\"\n                  component={TextField}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n                <Field component={RadioGroup} name=\"priority\" row>\n                  {[\"Low\", \"Medium\", \"High\"].map((e) => (\n                    <FormControlLabel\n                      value={e}\n                      control={<Radio color=\"primary\" />}\n                      label={e}\n                    />\n                  ))}\n                </Field>\n              </DialogContent>\n              <DialogActions>\n                <Button\n                  color=\"primary\"\n                  variant=\"contained\"\n                  fullWidth\n                  type=\"submit\"\n                  disabled={!dirty || !isValid}\n                >\n                  save\n                </Button>\n              </DialogActions>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Dialog>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n} from \"@material-ui/core\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AddDialog from \"../components/Todo/AddTask\";\nimport { crossItem } from \"../store/actions/todoActions\";\nimport {State} from \"../store/reducers/index\"\nimport \"../styles/todo.scss\";\ninterface Item {\n  task: string;\n  priority: string;\n  id: string;\n  isActive: boolean;\n  label: string;\n}\nexport default function TodoList() {\n  const items = useSelector((state:State) => state.todo.items);\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleMark = (id:string) => {\n    dispatch(crossItem(id));\n  };\n  return (\n    <Grid container>\n      <Grid item md={12} className=\"todo-list__title\">\n        <h1>Marketing Campaign</h1>\n      </Grid>\n      <Grid\n        item\n        container\n        md={12}\n        className=\"todo-list__table\"\n        justifyContent=\"center\"\n      >\n        <Grid item md={8}>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell className=\"table-cell\">\n                    <Button\n                      onClick={() => setOpen(true)}\n                      className=\"todo-list__add-button\"\n                    >\n                      Add task\n                    </Button>\n                  </TableCell>\n                  <TableCell className=\"table-cell\" align=\"right\">\n                    <span className=\"todo-list__priority-label\">Priority</span>\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {items.map((row:Item) => (\n                  <TableRow key={row.id} onClick={() => handleMark(row.id)}>\n                    <TableCell className=\"table-cell todo-list__task-name\">\n                      <CheckCircleOutlineIcon\n                        className={`todo-list__table-icon--${\n                          row.isActive ? \"active\" : \"inactive\"\n                        }`}\n                      />\n                      <span className={row.isActive ? \"\" : \"cross\"}>{row.task}</span>\n                    </TableCell>\n                    <TableCell className=\"table-cell\" align=\"right\">\n                      <span className={`chip ${row.priority.toLowerCase()}`}>\n                        {row.label}\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n\n      <AddDialog open={open} onClose={() => setOpen(false)} />\n    </Grid>\n  );\n}\n"],"sourceRoot":""}